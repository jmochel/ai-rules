---
description:  General Git commit messages
globs:
alwaysApply: true
---
# Git Commit Message Standards

## Overview
This document defines two distinct commit message formats:
1. Automated interim commits triggered by successful builds
2. Manual developer commits following Conventional Commits standard

## Automated Interim Commits

### Trigger
- Automatically created after a successful build
- Generated by the CI/CD system
- Used for tracking incremental progress

### Format
```
interim: <brief summary of changes>
```

### Rules
- Must start with `interim:`
- Followed by a space
- Brief summary in present tense
- No more than 50 characters
- No period at the end

### Examples
```
interim: update dependency versions
interim: fix linter errors in UserService
interim: add test coverage for PaymentProcessor
```

## Manual Developer Commits

### Format
Follows the [Conventional Commits](mdc:https:/www.conventionalcommits.org) specification:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Types
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `build`: Changes that affect the build system or external dependencies
- `ci`: Changes to CI configuration files and scripts
- `chore`: Changes to the build process or auxiliary tools
- `revert`: Reverts a previous commit

### Rules
1. **Type**:
   - Must be one of the types listed above
   - Must be lowercase
   - Must be followed by a colon and space

2. **Scope** (optional):
   - Enclosed in parentheses
   - Describes the section of the codebase
   - Examples: `(auth)`, `(api)`, `(database)`

3. **Description**:
   - Brief summary in present tense
   - No more than 72 characters
   - No period at the end

4. **Body** (optional):
   - Detailed explanation of what and why
   - Each line no more than 72 characters
   - Blank line between description and body

5. **Footer** (optional):
   - Reference issues, pull requests
   - Breaking changes
   - Each line no more than 72 characters

### Examples

#### Simple Commit
```
feat: add user authentication endpoint
```

#### Commit with Scope
```
fix(auth): resolve token expiration issue
```

#### Commit with Body
```
feat(api): implement rate limiting

Add rate limiting middleware to protect API endpoints
from abuse. Configurable through application.yml
```

#### Commit with Footer
```
fix: correct payment processing logic

The payment processor was incorrectly calculating
discounts for bulk purchases.

Fixes #123
```

#### Breaking Change
```
feat(api): remove deprecated endpoints

BREAKING CHANGE: The following endpoints have been removed:
- /api/v1/legacy/users
- /api/v1/legacy/payments
```

## Enforcement

### Automated Checks
- CI/CD pipeline should validate commit messages
- Reject commits that don't follow the format
- Provide clear error messages for invalid formats

### Tools
- Use commitlint for validation
- Configure pre-commit hooks
- Set up commit message templates

## Best Practices

### For Interim Commits
- Keep summaries concise but descriptive
- Focus on what changed, not why
- Use consistent terminology

### For Developer Commits
- Write clear, specific descriptions
- Use imperative mood ("add" not "added")
- Reference related issues/tickets
- Group related changes
- Keep commits focused and atomic

## Integration

### Git Configuration
```bash
# Set up commit template
git config commit.template .gitmessage
```

